[
  {
    "objectID": "posts/we_are_live/index.html",
    "href": "posts/we_are_live/index.html",
    "title": "We are live!",
    "section": "",
    "text": "Look at me, I have a blog. I didn’t even break a sweat creating this. To Quarto creators, thank you!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Datatunes",
    "section": "",
    "text": "Email Cleaning\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nRenaming Columns with Python Dictionaries\n\n\n\n\n\n\n\nPython\n\n\n\n\n\n\n\n\n\n\n\nNov 6, 2023\n\n\nMaangi Josiah\n\n\n\n\n\n\n  \n\n\n\n\nWe are live!\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nNov 2, 2023\n\n\nMaangi Josiah\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About",
    "section": "",
    "text": "Hello, I’m Maangi Josiah and a data addict.\nI’m a Finance graduate from the University of Nairobi, Kenya with an appetite for data tools. Like most analysts, I draw my dopamine from utilizing SQL, R, Power BI, and some Python. In this blog, I chronicle my data journey, sharing simple yet invaluable tricks I have encountered along the way. I have an obvious bias for R & SQL."
  },
  {
    "objectID": "posts/Renaming Columns/index.html",
    "href": "posts/Renaming Columns/index.html",
    "title": "Renaming Columns with Python Dictionaries",
    "section": "",
    "text": "Import the required libraries\n\nimport pandas as pd\nimport os\n\n\n\nCreate a simple customer information data-frame\n\ndata = {\n    'given name': ['Josiah', 'Fred', 'Julie'],\n    'family name': ['Maangi', 'Juma', 'Musau'],\n    'phone':[25471234, 25472345,25473456],\n    'email': ['josiah@gml.com', 'fred@gml.com','julie@gml.com'],\n    'sex': ['M','M','F'],\n    'town': ['Nairobi', 'Kisumu', 'Mombasa']\n}\n\ncustomer_df = pd.DataFrame(data)\n\nHere is how our small data-frame looks:\n\ncustomer_df\n\n\n\n\n\n\n\n\ngiven name\nfamily name\nphone\nemail\nsex\ntown\n\n\n\n\n0\nJosiah\nMaangi\n25471234\njosiah@gml.com\nM\nNairobi\n\n\n1\nFred\nJuma\n25472345\nfred@gml.com\nM\nKisumu\n\n\n2\nJulie\nMusau\n25473456\njulie@gml.com\nF\nMombasa\n\n\n\n\n\n\n\n\n\nMake a copy of customer_df\n\ncustomer_df_copy = customer_df.copy()\n\n\n\nHow I want to Rename my columns\nI will rename my columns as below:\n\ngiven name to First Name\nfamily name to Last Name\ntown to City\n\n\n\nRename a single column\nTo rename columns, we use the rename function from pandas as follows.\nThe column we want to rename(given name) will be on the left, and the new name we want to assign to this column(Family Name) will be on the right. The two names should be separated by a colon.\nThe inplace = True argument means this change happen with our customer_df_copy.\n\ncustomer_df_copy.rename(columns = {'given name': 'Family Name'}, inplace = True)\n\n\n\nRename multiple columns at once\n\ncustomer_df_copy.rename(columns = {'given name': 'Family Name', 'town': 'City'}, inplace = True)\n\n\n\nCreate a dictionary of column mappings from an excel/csv file\nImagine a scenario where you have to rename about 15 columns every time you receive files from a given customers. Using the above approach is not only manual but prone to errors. Since this is a repetitive process;\n\nI will create a file with customer - company column mappings,\nconvert it into a dictionary, and\nuse it to rename files as below.\n\n\n\n\nclient to company column mapping\n\n\nCode\n\n# reading in my column mapping file\nmapping = pd.read_excel(r\"C:\\Users\\ADMIN\\Downloads\\col_mapping.xlsx\")\n\n# creating a data dictionary\ncol_mapping_dict = mapping.set_index('customer_details')['company_mapping'].to_dict()\n\n\n\nRename using provided column mappings\n\n# I will make a copy of my customer_df again\nrenamed_df = customer_df.copy()\n\n#then rename it\nrenamed_df.rename(columns = col_mapping_dict, inplace = True)\n\nHere is a view of our customer df vs our renamed df.\n\n\nTable 1: Master to renamed\n\n\n\n\n(a) customer_df\n\n\n\n\n\n\n\n\n\n\ngiven name\nfamily name\nphone\nemail\nsex\ntown\n\n\n\n\nJosiah\nMaangi\n25471234\njosiah@gml.com\nM\nNairobi\n\n\nFred\nJuma\n25472345\nfred@gml.com\nM\nKisumu\n\n\nJulie\nMusau\n25473456\njulie@gml.com\nF\nMombasa\n\n\n\n\n\n\n(b) renamed_df\n\n\n\n\n\n\n\n\n\n\nFirst Name\nLast Name\nPhone No\nEmail address\nGender\nCity\n\n\n\n\nJosiah\nMaangi\n25471234\njosiah@gml.com\nM\nNairobi\n\n\nFred\nJuma\n25472345\nfred@gml.com\nM\nKisumu\n\n\nJulie\nMusau\n25473456\njulie@gml.com\nF\nMombasa"
  },
  {
    "objectID": "posts/Combining CSV and Excel files in R/index.html",
    "href": "posts/Combining CSV and Excel files in R/index.html",
    "title": "Combining Files with R",
    "section": "",
    "text": "In this short blog post, I will show you how to combine multiple csv and excel files using R. I will focus on the following file structures:\n\nMultiple csv/excel files.\nMultiple Excel files with multiple tabs\nAn Excel workbook with tabs(sheets) holding similar information.\n\n\nLoad the required libraries:\n\n# first let create a list of our libraries, assuming all are installed\nlibs &lt;- c('rio', 'tidyverse', 'readxl', 'writexl','DT') \n\n# load the libraries\ninvisible(lapply(libs,library, character.only = T))\n\n\nCombining Multiple csv & excel files\nFirst, I will set my working directory to downloads folder since my target folder(file_to_combine) with files I want to combine is under downloads folder.\nHere is a screenshot of my files_to_combine folder and it’s contents.\n\nNB: There are better ways of working with file paths, but I wanted to make this easy to follow.\n\n# path to the folder\nfiles_to_combine &lt;- \"C:\\\\Users\\\\ADMIN\\\\Downloads\\\\files_to_combine\"\n\n# combine csv files in files_to_combine folder\ncombined_csvs &lt;- dir(files_to_combine,full.names = TRUE, pattern = \"csv\") |&gt;  \n  purrr::map_df(read_csv)\n\n# combine xlsx files in files_to_combine folder\ncombined_xlsx &lt;- dir(files_to_combine,full.names = TRUE, pattern = \"xlsx\") |&gt;  \n  purrr::map_df(read_excel)\n\n\n\nCombining a specific tab(sales) from multiple Excels workbooks\nLet’s assume you work for a company with branches across multiple cities in the world. And every month, the sales department receives an Excel workbook from each city with 3 tabs - orders, sales, and products. To quickly get the total sales, you have to consolidate data from the sales tab(sheet) from all files. This hypothetical, such a company would definitely maintain a sales database.\n\n\n# first, you will pass in the folder name \"sale_data\" to dir() as shown\n# second, you can include the pattern argument in dir() as we did above if your folder has other files other than Excel.\n# in the map_df, call the read_excel function followed by the sheetname using sheet as shown.\n\nsales_data &lt;- \"C:\\\\Users\\\\ADMIN\\\\Documents\\\\sales_data\"\n\nsales_report &lt;- dir(sales_data,full.names = T) |&gt; \n  map_df(read_excel,sheet= \"sales\")\n\nSometimes, you may run into this error - can’t combine chr with dbl . This simply means column types are inconsistent across the files you are trying to combine. The below solution worked for me.\n\n# all I did is change columns types across all files to character type\nsales_report_2 &lt;- dir(sales_data, full.names = T) |&gt;  \n  map_dfr(~read_excel(.x,sheet = \"sales\" ) |&gt; \n  mutate(across(.fns = as.character))) |&gt;  \n  type_convert()\n\n\n\nCombining all tabs(sheets) from an Excel workbook\nAgain, let’s assume we have an Excel workbook called agent_sale with sales data. Each tab has sales made by a particular sales agent and you want to combine the sheets into a single list. This is straightforward using the rio package as demonstrated below.\n\n\n\nUsing rio package and rbind\n\n# since my file is in the downloads folder which is my set workdirectory, \n#I will call the import_list function from rio on it as follows and combine \n#the sheets with rbind.\n\n#path to excel_workbook\nagent_sales &lt;- \"C:\\\\Users\\\\ADMIN\\\\Documents\\\\agent_sales.xlsx\"\n  \nagents_report &lt;- import_list(agent_sales, rbind = T)\n\n\n\nUsing readxl and tidyverse\nI will always prefer the above approach but if you want to know which sheet name each row of data is coming from, then this approach is exactly what you need.\n\n agents_report_2 &lt;- excel_sheets(agent_sales) |&gt;  \n  map_df(~mutate(read_xlsx(agent_sales, sheet = .x),\n                 agent_name = .x))\n\n\n# make a a table of the agent_report_2 and filter for any agent\ndatatable(agents_report_2, filter = 'top')"
  },
  {
    "objectID": "posts/email_cleaning/index.html",
    "href": "posts/email_cleaning/index.html",
    "title": "Email Cleaning",
    "section": "",
    "text": "This how to do it.\n\n2 + 2\n\n[1] 4"
  }
]