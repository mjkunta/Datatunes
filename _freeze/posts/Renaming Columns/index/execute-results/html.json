{
  "hash": "7da5160d8b709fc7e122e471285a4b2d",
  "result": {
    "markdown": "---\ntitle: \"Renaming Columns with Python Dictionaries\"\nformat: html\nauthor: Maangi Josiah\ncategories: [Python]\ndate: 11-06-2023\n---\n\n#### **Import the required libraries**\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport os\n```\n:::\n\n\n#### **Create a simple customer information data-frame**\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndata = {\n    'given name': ['Josiah', 'Fred', 'Julie'],\n    'family name': ['Maangi', 'Juma', 'Musau'],\n    'phone':[25471234, 25472345,25473456],\n    'email': ['josiah@gml.com', 'fred@gml.com','julie@gml.com'],\n    'sex': ['M','M','F'],\n    'town': ['Nairobi', 'Kisumu', 'Mombasa']\n}\n\ncustomer_df = pd.DataFrame(data)\n```\n:::\n\n\nHere is how our small data-frame looks:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ncustomer_df\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>given name</th>\n      <th>family name</th>\n      <th>phone</th>\n      <th>email</th>\n      <th>sex</th>\n      <th>town</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Josiah</td>\n      <td>Maangi</td>\n      <td>25471234</td>\n      <td>josiah@gml.com</td>\n      <td>M</td>\n      <td>Nairobi</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Fred</td>\n      <td>Juma</td>\n      <td>25472345</td>\n      <td>fred@gml.com</td>\n      <td>M</td>\n      <td>Kisumu</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Julie</td>\n      <td>Musau</td>\n      <td>25473456</td>\n      <td>julie@gml.com</td>\n      <td>F</td>\n      <td>Mombasa</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### **Make a copy of customer_df**\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ncustomer_df_copy = customer_df.copy()\n```\n:::\n\n\n#### **How I want to Rename my columns**\n\nI will rename my columns as below:\n\n-   *given name* to *First Name*\n-   *family name* to *Last Name*\n-   *town* to *City*\n\n#### **Rename a single column**\n\nTo rename columns, we use the rename function from pandas as follows.\n\nThe column we want to rename(given name) will be on the left, and the new name we want to assign to this column(Family Name) will be on the right. The two names should be separated by a colon.\n\nThe *inplace = True* argument means this change happen with our customer_df_copy.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ncustomer_df_copy.rename(columns = {'given name': 'Family Name'}, inplace = True)\n```\n:::\n\n\n#### **Rename multiple columns at once**\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ncustomer_df_copy.rename(columns = {'given name': 'Family Name', 'town': 'City'}, inplace = True)\n```\n:::\n\n\n#### **Create a dictionary of column mappings from an excel/csv file**\n\nImagine a scenario where you have to rename about 15 columns every time you receive files from a given customers. Using the above approach is not only manual but prone to errors. Since this is a repetitive process;\n\n-   I will create a file with customer - company column mappings,\n\n-   convert it into a dictionary, and\n\n-   use it to rename files as below.\n\n![*client to company column mapping*](images/col_mappings-01.png){width=\"558\"}\n\nCode\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# reading in my column mapping file\nmapping = pd.read_excel(r\"C:\\Users\\ADMIN\\Downloads\\col_mapping.xlsx\")\n\n# creating a data dictionary\ncol_mapping_dict = mapping.set_index('customer_details')['company_mapping'].to_dict()\n```\n:::\n\n\n#### **Rename using provided column mappings**\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# I will make a copy of my customer_df again\nrenamed_df = customer_df.copy()\n\n#then rename it\nrenamed_df.rename(columns = col_mapping_dict, inplace = True)\n```\n:::\n\n\nHere is a view of our customer_df vs our renamed_df.\n\n::: {#tbl-example .cell tbl-subcap='[\"customer_df\",\"renamed_df\"]' tbl-cap='Master to renamed' layout-ncol='2' execution_count=9}\n\n::: {.cell-output .cell-output-display}\n| given name   | family name   |    phone | email          | sex   | town    |\n|:-------------|:--------------|---------:|:---------------|:------|:--------|\n| Josiah       | Maangi        | 25471234 | josiah@gml.com | M     | Nairobi |\n| Fred         | Juma          | 25472345 | fred@gml.com   | M     | Kisumu  |\n| Julie        | Musau         | 25473456 | julie@gml.com  | F     | Mombasa |\n:::\n\n::: {.cell-output .cell-output-display}\n| First Name   | Last Name   |   Phone No | Email address   | Gender   | City    |\n|:-------------|:------------|-----------:|:----------------|:---------|:--------|\n| Josiah       | Maangi      |   25471234 | josiah@gml.com  | M        | Nairobi |\n| Fred         | Juma        |   25472345 | fred@gml.com    | M        | Kisumu  |\n| Julie        | Musau       |   25473456 | julie@gml.com   | F        | Mombasa |\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}