{
  "hash": "ac2db252c7b05e7c3487d32f890b96ee",
  "result": {
    "markdown": "---\ntitle: \"Report Manipulation with R\"\nformat: html\neditor: visual\ndate: 2023-12-14\ncategories: [R,Report Manipulation]\ntitle-block-banner: false\n---\n\n\n#### **Scenario**\n\nYou have been asked to pull a report of all employees and their respective departments from a database. The user wants this report in an Excel workbook with each department and employees under it on a separate sheet. Assuming we have Accounting, Finance, and Marketing departments, our Excel workbook should have 3 sheets(tabs) representing the 3 departments and their respective employees.\n\nYou can pull these reports one by one and add them to an Excel workbook since they are just 3. But what if there are 6 or more departments, that approach will be ineffective, manual, and annoyingly repetitive. Well, we can do pull a single report and easily manipulate it with tidyverse and openxlsx functions.\n\n**Load the required packages:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(odbc, DBI, tidyverse, writexl, openxlsx)\n```\n:::\n\n\nTo manipulate our report into a workbook with sheets for each department, we will do the following.\n\n1.  Pull a single report with all employees and their respective departments and save it.\n2.  Create a workbook\n3.  Apply the nest_by function from dplyr to our report and nest by Department.\n4.  Add sheets to our workbook. We will use department names as our sheet names.\n5.  Write data into each sheets(Department)\n6.  Save your workbook\n\n**A primer on nest_by()**\n\nFirst, I will create a simple df and see what happens to it when we apply the nest_by function to it. Below is my simple members df with columns: name, country, and avg_sleep_hours.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a simple data frame and call it members\nname <- c('Julie', 'Maangi', 'Kevin', 'Mercy', 'Nick', 'Salim') \ncountry <- c('Kenya', 'Kenya', 'Uganda', 'Uganda', 'Tanzania', 'Tanzania')\navg_sleep_hours <- c(8, 7, 7, 9, 6, 9)\nmembers <- data.frame(name, country, avg_sleep_hours)\n\nmembers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    name  country avg_sleep_hours\n1  Julie    Kenya               8\n2 Maangi    Kenya               7\n3  Kevin   Uganda               7\n4  Mercy   Uganda               9\n5   Nick Tanzania               6\n6  Salim Tanzania               9\n```\n:::\n:::\n\n\nNext, let us see what happens when we nest_by the country column on the members df.\n\nnest_by works the same way as group_by except that it turns our data frame into an object with two columns in this case. The first column is the categories we are nesting by - country and will display the unique categories as our rows. The second column is data from other columns. In summary, all details for members from Kenya will be bundled into a single row, ditto those from Uganda and Tanzania as shown below. With this formating, we can easily write our data for each country into separate sheet.\n\nSetting .keep = TRUE in the code allows us to keep the column(s) we are nesting by.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n members |>\n  nest_by(country, .keep = TRUE)\n```\n:::\n\n\n![](/posts/Report manipulation/nest_by.png){fig-align=\"center\"}\n\n#### Apply the concept to our use case\n\n**Create a database connection and pull our report**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmssql_con <- DBI::dbConnect(drv = odbc::odbc(),\n                      Driver = \"SQL Server\",\n                      Server = \"DESKTOP-CKPR726\",\n                      Database = \"Employees\"\n                      #UID = \"user\",\n                      #PWD = \"password\"\n                      ) \n```\n:::\n\n\nBefore pulling the report, we can check how many distinct Departments we have. So we expect 7 sheets in our workbook.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT\n  DISTINCT\n      Department\nFROM\n      Job_Desc\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 7 records\n\n|Department      |\n|:---------------|\n|Marketing       |\n|Sales           |\n|Engineering     |\n|IT              |\n|Human Resources |\n|Finance         |\n|Accounting      |\n\n</div>\n:::\n\n\nLet's pull a report of all employees and their departments. I will save it as employees_per_dept\n\n\n::: {.cell output.var='employees_per_dept'}\n\n```{.sql .cell-code}\n\nSELECT\n          Full_Name\n        , Gender\n        , Age\n        , Country\n        , Department\n        , Business_Unit\nFROM \n          Employee_Info AS EI\nLEFT JOIN\n          Job_Desc AS JD\n      ON  EI.Emp_ID = JD.Emp_ID\nWHERE Department IS NOT NULL\n```\n:::\n\n\nCreate a workbook, apply the nest_by function, add sheets to our workbook, write data into the respective sheets, and save the workbook.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# initialize the workbook\n\nemployees_workbook <- createWorkbook()\n\n# apply nest_by to our report\nemployees_per_dept |> \n  dplyr::nest_by(Department, .keep = TRUE) |> \n  \n# add worksheets for each department to our workbook\n  dplyr::mutate(\n    addWorksheet(employees_workbook, paste0(Department, '_Dept')),\n    \n# write data into the respective worksheets(Departments)\n    writeData(employees_workbook, paste0(Department,'_Dept'), data,)\n  ) \n   \n# save workbook\nsaveWorkbook(employees_workbook, 'employees_per_dept.xlsx', overwrite = TRUE)\n```\n:::\n\n\nAnd we will get our workbook with all the sheets(Departments) as shown below.\n\n![](nest_by_depts.png){fig-align=\"center\"}\n\n#### Report Customization\n\nWe can customize our report by adding alignment, font style, color, tabcolour, and gridlines. There also many styles one can apply.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define the style of my sheets\nhs1 <- createStyle(\n  fgFill = \"#DCE6F1\", halign = \"CENTER\", textDecoration = \"italic\",\n  border = \"Bottom\"\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwb2 <- createWorkbook()\n\n# write into the workbook\nemployees_per_dept |> \n  dplyr::nest_by(Department, .keep = TRUE) |> \n  \n# add worksheets for each department to our workbook\n  dplyr::mutate(\n    addWorksheet(wb2, \n                 paste0(Department, '_Dept'), \n                 gridLines = FALSE, \n                 tabColour = '#00008b'),\n    \n# write data into the respective worksheets(Departments)\n    writeData(wb2, \n              paste0(Department,'_Dept'), \n              data, \n              headerStyle = hs1)\n  ) \n   \n# save workbook\nsaveWorkbook(wb2, 'employees_per_dept2.xlsx', overwrite = TRUE)\n```\n:::\n\n\n![](custom.png){fig-align=\"center\" width=\"653\"}\n\nUp next, we will see how we can do this using python - with groupby from pandas and a few functions from openpyxl.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}