---
title: "Combining Files with R"
author: "Maangi Josiah"
format: html
editor: visual
categories: [R]
date: 11-08-2023
---

In this short blog post, I will show you how to combine multiple csv and excel files using R. I will focus on the following file structures:

-   Multiple csv/excel files.
-   Multiple Excel files with multiple tabs
-   An Excel workbook with tabs(sheets) holding similar information.

### Load the required libraries:

```{r}
#| output: false
# first let create a list of our libraries, assuming all are installed
libs <- c('rio', 'tidyverse', 'readxl', 'writexl','DT') 

# load the libraries
invisible(lapply(libs,library, character.only = T))

```

#### Combining Multiple csv & excel files

First, I will set my working directory to downloads folder since my target folder(file_to_combine) with files I want to combine is under downloads folder.

Here is a screenshot of my files_to_combine folder and it's contents.

![](images/files_to_combine.png)

NB: There are better ways of working with file paths, but I wanted to make this easy to follow.

```{r}
#| output: false

# path to the folder
files_to_combine <- "C:\\Users\\ADMIN\\Downloads\\files_to_combine"

# combine csv files in files_to_combine folder
combined_csvs <- dir(files_to_combine,full.names = TRUE, pattern = "csv") |>  
  purrr::map_df(read_csv)

# combine xlsx files in files_to_combine folder
combined_xlsx <- dir(files_to_combine,full.names = TRUE, pattern = "xlsx") |>  
  purrr::map_df(read_excel)


```

#### Combining a specific tab(sales) from multiple Excels workbooks

Let's assume you work for a company with branches across multiple cities in the world. And every month, the sales department receives an Excel workbook from each city with 3 tabs - orders, sales, and products. To quickly get the total sales, you have to consolidate data from the sales tab(sheet) from all files. This hypothetical, such a company would definitely maintain a sales database.

![](images/multiple_tabs.png)

```{r}
#| output: false
# first, you will pass in the folder name "sale_data" to dir() as shown
# second, you can include the pattern argument in dir() as we did above if your folder has other files other than Excel.
# in the map_df, call the read_excel function followed by the sheetname using sheet as shown.

sales_data <- "C:\\Users\\ADMIN\\Documents\\sales_data"

sales_report <- dir(sales_data,full.names = T) |> 
  map_df(read_excel,sheet= "sales")

```

Sometimes, you may run into this error - can't combine chr with dbl . This simply means column types are inconsistent across the files you are trying to combine. The below solution worked for me.

```{r}
#| output: false
# all I did is change columns types across all files to character type
sales_report_2 <- dir(sales_data, full.names = T) |>  
  map_dfr(~read_excel(.x,sheet = "sales" ) |> 
  mutate(across(.fns = as.character))) |>  
  type_convert()

```

#### Combining all tabs(sheets) from an Excel workbook

Again, let's assume we have an Excel workbook called agent_sale with sales data. Each tab has sales made by a particular sales agent and you want to combine the sheets into a single list. This is straightforward using the rio package as demonstrated below.

![](images/sales_agents.png)

#### Using rio package and rbind

```{r}
#| output: false
# since my file is in the downloads folder which is my set workdirectory, 
#I will call the import_list function from rio on it as follows and combine 
#the sheets with rbind.

#path to excel_workbook
agent_sales <- "C:\\Users\\ADMIN\\Documents\\agent_sales.xlsx"
  
agents_report <- import_list(agent_sales, rbind = T)
```

#### Using readxl and tidyverse

I will always prefer the above approach but if you want to know which sheet name each row of data is coming from, then this approach is exactly what you need.

```{r}
 agents_report_2 <- excel_sheets(agent_sales) |>  
  map_df(~mutate(read_xlsx(agent_sales, sheet = .x),
                 agent_name = .x))

```

```{r}
# make a a table of the agent_report_2 and filter for any agent
datatable(agents_report_2, filter = 'top')
```

```         
```
