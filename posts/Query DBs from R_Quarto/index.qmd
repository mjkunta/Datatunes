---
title: "Query MS SQL and PostgreSQL from R/Quarto"
format: html
editor: visual
date: 2023-11-27
title-block-banner: false
---

I have been using Quarto in RStudio for a few months now and I am captivated by it's features. The ability to seamlessly execute SQL queries directly from SQL code chunks and saving results as R data frames is compelling. This connection is valuable when you want to leverage R's data manipulations capabilities especially the tidyverse packages. We will explore a few examples in the next blog.

For now, let's focus on establishing connections to and querying the following SQL databases:

-   MS SQL Server
-   PostegreSQL

#### **Load the Required Libraries:**

My preferred approach needs installation of only two packages. That is: ODBC and DBI. Since I have already installed the two packages, I will go ahead and load them.

```{r}
#| output: false

library(odbc) # provides drivers to connect to different SQL dialects
library(DBI)  # provides functions to interact with the database

library(tidyverse) # for data manipulation

```

#### **Connect to MS SQL Server**

I will begin by connecting to Microsoft SQL Server using the dbConnect function from the DBI package. This function allows for database user authentication and connection establishment. You will need to provide the Driver, Server, Database, UID, and PWD parameters to the dbConnect function. For MS SQL Server, the Server parameter corresponds to the Server name, UID corresponds to Login, and PWD corresponds to Password in the login details, as shown in the first screenshot below. To obtain the MS SQL Driver, navigate to the Drivers tab in the ODBC Data Sources window, as shown in the second screenshot. The driver name will depend on the MS SQL version you are using.

![MS SQL Login](MS%20SQL%20login.png){fig-align="center" width="522"}

![Drivers](drivers.png){fig-align="center" width="510"}

After passing in the required parameters to **dbConnect**, I will save my connection as *mssql_con* as shown below. Having established the connection, we are ready to query our MS SQL database.

```{r}
mssql_con <- DBI::dbConnect(drv = odbc::odbc(),
                      Driver = "SQL Server",
                      Server = "DESKTOP-CKPR726",
                      Database = "Employees"
                      #UID = "user",
                      #PWD = "password"
                      ) 

```

Once the above code runs, the connection will be established and it will be displayed in the connection pane of your RStudio. As you can see below, we have connected to Employees database, we can see the tables under it, and the column names under Employee_Info table.

![](connection.png){fig-align="center"}

#### **Querying MS SQL Server**

Of course we can query from an R code chunk as below using dbGetQuery(). But let's focus on how to do this froma sql code chunk.

```{r}

query <- 'SELECT TOP 5 Full_Name, Age, Gender FROM Employee_Info'

employees_df <- DBI::dbGetQuery(mssql_con, query)
```

In the SQL code chunk section, assign your connection variable to the connection parameter.

![](mssql%20con.png){fig-align="left"}

And then run your query as below.

```{sql connection = mssql_con}
SELECT
         Gender
        ,Country
        ,COUNT(Full_Name) AS Employee_Counts
FROM 
        Employee_Info AS EI
LEFT JOIN
        Job_Desc AS JD
        ON EI.Emp_ID = JD.Emp_ID
WHERE
        Country <> 'Kenya'
GROUP BY
        ROLLUP (Gender, Country)

```

You'll want to save the output of your query into a df that you can interact with R.

You can achieve this by passing a variable name to the output.var option in the sql code chunk as shown below.

![](output.var.png){fig-align="left"}

And then run you query. The query output will be saved as employee_df and it will be one of the variables in your environment window in RStudio.

```{sql connection = mssql_con, output.var = 'employee_gender_per_ctry'}

SELECT
         Gender
        ,Country
        ,COUNT(Full_Name) AS Employee_Counts
FROM 
        Employee_Info AS EI
LEFT JOIN
        Job_Desc AS JD
        ON EI.Emp_ID = JD.Emp_ID
WHERE
        Country <> 'Kenya'
GROUP BY
        CUBE (Gender, Country)
        
```

Here is our stored query output.

```{r}
employee_gender_per_ctry
```

#### **Connect to PostegreSQL**

For postgreSQL, you will follow the same procedure as we did with MS SQL and pass in the login details provided by your Database administrator. In my case, I'm the superuser ðŸ˜Ž. Since my database is hosted locally, my server will be localhost, UID = postgres and PWD = postgres. These are the defaults when you install postgreSQL. But I changed my PWD to maangi.

The most important thing will be knowing the driver to use. Accessing these details is slightly different from accessing the MS SQL driver. Follow the following steps:

-   On you windows laptop, you click the windows key + R.

-   On the window that pops up, type - **odbcad32.exe**

    ![](postgre_drivers.png){width="501"}

-   Click ok and navigate to the Drivers tab and pick the appropriate driver name as shown below.

    ![](postgresql_drivers.png){width="501"}

Having passed in all the required parameters to **dbConnect**, I will proceed to create a connection variable called *postegresql_con*.

```{r}
# Establish the connection
postgresql_con <- dbConnect(odbc::odbc(),
 Driver = "PostgreSQL ODBC Driver(ANSI)",
 Database = "car_brands",
 Server = "localhost",
 UID = "postgres",
 PWD = "maangi"
)

```

On running the above connection query, if you navigate to the connections pane in your RStudio, you will see that a connection has been establisted to postgresSQL.

![](connection_pane.png){fig-align="left"}

#### **Querying PostgreSQL**

Since we have established a connection, we can now query postgreSQL straight from a SQL code chunk in quarto as below.

![](postgre_query.png)

```{sql connection = postgresql_con, output.var = 'cars'}

SELECT * FROM cars
```

```{r}
cars
```

There is a second approach that we can use to connect to postgreSQL. In this case, we will need to install and load the RPostgres package. Most of the parameters we pass in are similar except for port which we didn't provide in the first approach and driver which is not needed in this case.

```{r}

# load the required library
library(RPostgres)

# Replace these values with your actual database credentials
 postgresql_con2 <- dbConnect(RPostgres::Postgres(),
  dbname = "car_brands",
  user = "postgres",
  password = "maangi",
  host = "localhost",
  port = 5432  # The default PostgreSQL port is 5432
)
```

#### **Disconnect**

Lastly, it's a good practice to disconnect from you database when you are done querying it to free up your laptop resources.

```{r}
# disconnect from MS SQL
dbDisconnect(mssql_con)

# disconnect from MS SQL
dbDisconnect(postgresql_con)

dbDisconnect(postgresql_con2)
```
